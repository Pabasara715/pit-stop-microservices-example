name: Build, Push, and Deploy to EKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Find Changed Service
        id: changed_files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            src/**
          files_ignore: |
            src/k8s/**

      - name: Set Service Name from Path
        id: set_service
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          SERVICE_PATH=$(echo "${{ steps.changed_files.outputs.all_changed_files }}" | head -n 1 | cut -d'/' -f2)
          echo "service_name=${SERVICE_PATH,,}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Image to ECR
        if: steps.changed_files.outputs.any_changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SERVICE_NAME: ${{ steps.set_service.outputs.service_name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building service: $SERVICE_NAME"
          docker build -t $ECR_REGISTRY/pitstop/$SERVICE_NAME:$IMAGE_TAG -f src/$SERVICE_NAME/Dockerfile src/$SERVICE_NAME
          docker push $ECR_REGISTRY/pitstop/$SERVICE_NAME:$IMAGE_TAG

      - name: Set up kubectl for EKS
        run: aws eks update-kubeconfig --name pitstop-cluster --region us-east-1

      - name: Install istioctl
        run: |
          # Download and install Istio
          curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.26.0 sh -
          
          # Add istioctl to PATH for current session
          export PATH="$PWD/istio-1.26.0/bin:$PATH"
          echo "$PWD/istio-1.26.0/bin" >> $GITHUB_PATH
          
          # Verify installation
          istioctl version --client

      - name: Install Istio Control Plane
        run: |
          # Ensure istioctl is in PATH
          export PATH="$PWD/istio-1.26.0/bin:$PATH"
          
          # Check if Istio is already installed
          if ! kubectl get namespace istio-system 2>/dev/null | grep -q "Active"; then
            echo "Installing Istio control plane..."
            istioctl install --set values.defaultRevision=default -y
          else
            echo "Istio control plane already exists, skipping installation..."
          fi
          
          # Apply additional configurations
          cd src/k8s/istio
          chmod +x *.sh
          
          # Run the install script (modify it to skip istioctl install if needed)
          ./install-istio.sh || echo "Some Istio components may already exist, continuing..."

      - name: Deploy All Services to EKS
        run: |
          cd src/k8s/scripts
          chmod +x start-all.sh
          ./start-all.sh --istio