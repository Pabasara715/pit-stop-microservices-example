name: Build, Push, and Deploy to EKS

on:
  push:
    branches:
      - main # Triggers on push to the main branch
  workflow_dispatch: # Allows you to run it manually from the Actions tab

# Required permissions for OIDC to work
permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Find Changed Service
        id: changed_files
        # This action finds which files have changed in the 'src' directory
        uses: tj-actions/changed-files@v35
        with:
          files: |
            src/**

      - name: Set Service Name from Path
        id: set_service
        # This step only runs if a file in 'src/' was actually changed
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          # It takes the path of the first changed file (e.g., src/WebApp/...)
          # It then extracts just the service folder name (WebApp) and converts it to lowercase (webapp)
          SERVICE_PATH=$(echo "${{ steps.changed_files.outputs.all_changed_files }}" | head -n 1 | cut -d'/' -f2)
          echo "service_name=${SERVICE_PATH,,}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Uses the ARN from your GitHub secret to assume the role we created
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1 # Must match your EKS cluster region

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Image to ECR
        if: steps.changed_files.outputs.any_changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SERVICE_NAME: ${{ steps.set_service.outputs.service_name }}
          # Uses the unique commit hash as the image tag for traceability
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building service: $SERVICE_NAME"
          # Dynamically builds the correct Dockerfile based on the changed service
          docker build -t $ECR_REGISTRY/pitstop/$SERVICE_NAME:$IMAGE_TAG -f src/$SERVICE_NAME/Dockerfile src/$SERVICE_NAME
          docker push $ECR_REGISTRY/pitstop/$SERVICE_NAME:$IMAGE_TAG

      - name: Set up kubectl for EKS
        run: aws eks update-kubeconfig --name pitstop-cluster --region us-east-1

      - name: Install Istio
        run: |
          cd src/k8s/istio
          chmod +x install-istio.sh
          ./install-istio.sh

      - name: Deploy All Services to EKS
        run: |
          cd src/k8s/scripts
          chmod +x start-all.sh
          # Deploys all services using the Istio-enabled manifests
          ./start-all.sh --istio